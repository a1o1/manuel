[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "manuel-backend"
version = "1.1.1"
description = "Enterprise-grade AWS serverless backend for Manuel voice assistant"
authors = [
    {name = "Manuel Team", email = "admin@manuel.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["aws", "serverless", "voice-assistant", "bedrock", "rag", "sam"]

dependencies = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "redis>=4.5.0",
    "hiredis>=2.0.0",
    "cryptography>=41.0.0",
    "pickle-mixin>=1.0.0",
    "structlog>=23.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing frameworks
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-html>=3.1.0",
    "pytest-json-report>=1.5.0",
    "pytest-benchmark>=4.0.0",

    # HTTP and API testing
    "requests>=2.28.0",
    "requests-mock>=1.9.0",
    "responses>=0.23.0",
    "httpx>=0.24.0",

    # AWS mocking and testing
    "moto>=4.0.0",
    "boto3-stubs[essential]>=1.34.0",
    "types-requests>=2.31.0",

    # Load testing
    "locust>=2.14.0",

    # Security scanning
    "safety>=2.3.0",
    "bandit[toml]>=1.7.0",
    "semgrep>=1.45.0",

    # Test data generation
    "factory-boy>=3.2.0",
    "faker>=18.0.0",

    # Data validation
    "jsonschema>=4.17.0",
    "pydantic>=1.10.0",

    # CLI and utilities
    "click>=8.0.0",
    "tabulate>=0.9.0",
    "colorama>=0.4.0",
    "tqdm>=4.64.0",
    "rich>=13.0.0",

    # Code formatting
    "black>=23.0.0",
    "isort>=5.12.0",

    # Linting
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-pytest-style>=1.7.0",
    "flake8-simplify>=0.20.0",
    "pylint>=2.17.0",
    "pydocstyle>=6.3.0",

    # Type checking
    "mypy>=1.0.0",
    "types-redis>=4.6.0",

    # Documentation
    "interrogate>=1.5.0",
    "pydoc-markdown>=4.8.0",

    # Git hooks and commit management
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",

    # Development tools
    "pip-tools>=7.0.0",
    "wheel>=0.41.0",
    "build>=0.10.0",
]

[project.urls]
Homepage = "https://github.com/your-org/manuel"
Documentation = "https://docs.manuel.com"
Repository = "https://github.com/your-org/manuel"
Issues = "https://github.com/your-org/manuel/issues"
Changelog = "https://github.com/your-org/manuel/blob/main/CHANGELOG.md"

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.1.1"
version_files = [
    "pyproject.toml:version",
    "package.json:version"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.commitizen.customize]
message_template = "{{change_type}}{{scope}}: {{message}}{{body}}{{footer}}"
example = "feat(auth): implement JWT authentication\n\nAdd JWT token-based authentication with refresh tokens.\nIntegrate with AWS Cognito for user management.\n\nCloses #123"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>"
schema_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\\(.+\\))?: .{1,50}"
bump_pattern = "^(feat|fix|perf|refactor|BREAKING CHANGE)"

[tool.commitizen.customize.bump_map]
"BREAKING CHANGE" = "MAJOR"
"feat" = "MINOR"
"fix" = "PATCH"
"perf" = "PATCH"
"refactor" = "PATCH"

[tool.commitizen.customize.change_type_order]
change_type_order = [
    "BREAKING CHANGE",
    "feat",
    "fix",
    "perf",
    "refactor",
    "build",
    "ci",
    "docs",
    "style",
    "test",
    "chore",
    "revert"
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "invalid-name",
    "broad-except",
]

[tool.pylint.format]
max-line-length = 88

[tool.mypy]
python_version = "3.11"
# Strict mode settings
strict = true
explicit_package_bases = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true

# Output configuration
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true

# Import discovery
namespace_packages = true

# Exclude patterns
exclude = [
    "tests/",
    "build/",
    "dist/",
    ".venv/",
    "node_modules/",
    ".aws-sam/",
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "moto.*",
    "locust.*",
    "faker.*",
    "factory_boy.*",
    "responses.*",
    "pytest_mock.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
strict_optional = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
]
markers = [
    "auth: Authentication tests",
    "api: API functionality tests",
    "security: Security tests",
    "performance: Performance tests",
    "error_handling: Error handling tests",
    "failure_scenarios: Failure scenario tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "integration: Integration tests",
    "unit: Unit tests",
    "smoke: Smoke tests",
    "load: Load tests",
    "chaos: Chaos engineering tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "node_modules", ".aws-sam"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
ignore_paths = ["tests/*"]

[tool.ruff]
# Ruff configuration for fast linting
target-version = "py311"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy
    "PERF", # perflint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "S101",   # use of assert (pytest uses asserts)
    "S104",   # hardcoded bind all interfaces
    "S105",   # hardcoded password string
    "S106",   # hardcoded password function argument
    "S107",   # hardcoded password default argument
    "S108",   # hardcoded temp file
    "TRY003", # avoid specifying long messages outside exception class
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value comparison
    "COM812",  # trailing comma missing
    "ISC001",  # implicitly concatenated string literals
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "S105", "S106"]
"src/functions/*/app.py" = ["ARG001"]  # Lambda context often unused

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
combine-as-imports = true
force-grid-wrap = 0
force-single-line = false
include-trailing-comma = true
known-first-party = ["shared", "functions"]
line-length = 88
multi-line-output = 3
use-parentheses = true

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-nested-functions = true
ignore-private = true
ignore-property-decorators = true
ignore-semiprivate = true
fail-under = 70
exclude = ["tests", "build", "dist"]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.pydocstyle]
convention = "google"
add-ignore = [
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
    "D107",  # missing docstring in __init__
]
match-dir = "^(?!tests|build|dist).*"

[tool.safety]
# Safety configuration for dependency scanning
ignore = []
short-report = false
full-report = true
cache = true

[tool.semgrep]
config = [
    "auto",
    "p/security-audit",
    "p/python",
    "p/bandit",
]
