[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "manuel-backend"
version = "1.0.0"
description = "Enterprise-grade AWS serverless backend for Manuel voice assistant"
authors = [
    {name = "Manuel Team", email = "admin@manuel.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["aws", "serverless", "voice-assistant", "bedrock", "rag", "sam"]

dependencies = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "redis>=4.5.0",
    "hiredis>=2.0.0",
    "cryptography>=41.0.0",
    "pickle-mixin>=1.0.0",
    "structlog>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-html>=3.1.0",
    "pytest-json-report>=1.5.0",
    "requests>=2.28.0",
    "requests-mock>=1.9.0",
    "moto>=4.0.0",
    "locust>=2.14.0",
    "safety>=2.3.0",
    "bandit>=1.7.0",
    "responses>=0.23.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
    "jsonschema>=4.17.0",
    "pydantic>=1.10.0",
    "click>=8.0.0",
    "tabulate>=0.9.0",
    "colorama>=0.4.0",
    "tqdm>=4.64.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/manuel"
Documentation = "https://docs.manuel.com"
Repository = "https://github.com/your-org/manuel"
Issues = "https://github.com/your-org/manuel/issues"
Changelog = "https://github.com/your-org/manuel/blob/main/CHANGELOG.md"

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
version_files = [
    "pyproject.toml:version",
    "package.json:version"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.commitizen.customize]
message_template = "{{change_type}}{{scope}}: {{message}}{{body}}{{footer}}"
example = "feat(auth): implement JWT authentication\n\nAdd JWT token-based authentication with refresh tokens.\nIntegrate with AWS Cognito for user management.\n\nCloses #123"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>"
schema_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\\(.+\\))?: .{1,50}"
bump_pattern = "^(feat|fix|perf|refactor|BREAKING CHANGE)"

[tool.commitizen.customize.bump_map]
"BREAKING CHANGE" = "MAJOR"
"feat" = "MINOR"
"fix" = "PATCH"
"perf" = "PATCH"
"refactor" = "PATCH"

[tool.commitizen.customize.change_type_order]
change_type_order = [
    "BREAKING CHANGE",
    "feat",
    "fix",
    "perf",
    "refactor",
    "build",
    "ci",
    "docs",
    "style",
    "test",
    "chore",
    "revert"
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "invalid-name",
    "broad-except",
]

[tool.pylint.format]
max-line-length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
]
markers = [
    "auth: Authentication tests",
    "api: API functionality tests",
    "security: Security tests",
    "performance: Performance tests",
    "error_handling: Error handling tests",
    "failure_scenarios: Failure scenario tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "integration: Integration tests",
    "unit: Unit tests",
    "smoke: Smoke tests",
    "load: Load tests",
    "chaos: Chaos engineering tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]