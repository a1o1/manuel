# Manuel Backend - Code Quality Workflow
# Comprehensive code quality checks for pull requests and pushes

name: Code Quality

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/code-quality.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/code-quality.yml'

defaults:
  run:
    working-directory: backend

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        python-version: ["3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'backend/pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('backend/.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-
    
    # Code Formatting
    - name: Check code formatting with Black
      run: |
        echo "::group::Black Formatting Check"
        black --check --diff src/ tests/ || {
          echo "::error::Code is not properly formatted with Black"
          echo "Run 'make format' to fix formatting issues"
          exit 1
        }
        echo "::endgroup::"
    
    - name: Check import sorting with isort
      run: |
        echo "::group::Import Sorting Check"
        isort --check-only --diff src/ tests/ || {
          echo "::error::Imports are not properly sorted"
          echo "Run 'make format' to fix import sorting"
          exit 1
        }
        echo "::endgroup::"
    
    # Linting
    - name: Lint with Ruff (fast)
      run: |
        echo "::group::Ruff Linting"
        ruff check src/ tests/ --output-format=github
        echo "::endgroup::"
    
    - name: Lint with flake8
      run: |
        echo "::group::Flake8 Linting"
        flake8 src/ --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s: %(text)s'
        echo "::endgroup::"
    
    - name: Lint with pylint
      run: |
        echo "::group::Pylint Analysis"
        pylint src/ --output-format=colorized --score=yes --exit-zero
        echo "::endgroup::"
      continue-on-error: true  # Pylint warnings shouldn't fail the build
    
    # Type Checking
    - name: Type check with mypy
      run: |
        echo "::group::MyPy Type Checking"
        mypy src/ --show-error-codes --no-error-summary || {
          echo "::error::Type checking failed"
          echo "Fix type issues or add type ignores where appropriate"
          exit 1
        }
        echo "::endgroup::"
    
    # Documentation
    - name: Check docstring coverage
      run: |
        echo "::group::Docstring Coverage"
        interrogate src/ --fail-under=70 --verbose || {
          echo "::warning::Docstring coverage is below 70%"
          echo "Consider adding more documentation"
        }
        echo "::endgroup::"
      continue-on-error: true
    
    - name: Check docstring style
      run: |
        echo "::group::Docstring Style Check"
        pydocstyle src/ --convention=google --add-ignore=D100,D104,D107 || {
          echo "::warning::Docstring style issues found"
        }
        echo "::endgroup::"
      continue-on-error: true
    
    # Security Scanning
    - name: Security scan with bandit
      run: |
        echo "::group::Security Scan (Bandit)"
        bandit -r src/ -f json -o bandit-report.json || {
          echo "::error::Security vulnerabilities found"
          echo "Review bandit-report.json for details"
          bandit -r src/ -f screen  # Show readable output
          exit 1
        }
        bandit -r src/ -f screen  # Show summary
        echo "::endgroup::"
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: backend/bandit-report.json
        retention-days: 30
    
    - name: Check dependencies for vulnerabilities
      run: |
        echo "::group::Dependency Vulnerability Check"
        safety check --json --output safety-report.json || {
          echo "::error::Vulnerable dependencies found"
          echo "Review safety-report.json for details"
          safety check  # Show readable output
          exit 1
        }
        safety check
        echo "::endgroup::"
    
    - name: Upload safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: backend/safety-report.json
        retention-days: 30
    
    # Advanced Security (if semgrep is available)
    - name: Advanced security scan with semgrep
      run: |
        echo "::group::Advanced Security Scan (Semgrep)"
        semgrep --config=auto --json --output=semgrep-report.json src/ || {
          echo "::warning::Potential security issues found by semgrep"
          echo "Review semgrep-report.json for details"
        }
        semgrep --config=auto src/  # Show readable output
        echo "::endgroup::"
      continue-on-error: true
    
    - name: Upload semgrep results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-report
        path: backend/semgrep-report.json
        retention-days: 30
    
    # AWS SAM Template Validation
    - name: Install AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Validate SAM template
      run: |
        echo "::group::SAM Template Validation"
        sam validate --template template.yaml || {
          echo "::error::SAM template validation failed"
          exit 1
        }
        echo "::endgroup::"
    
    - name: Check CloudFormation template with cfn-lint
      run: |
        echo "::group::CloudFormation Linting"
        pip install cfn-lint
        cfn-lint template.yaml --format json --output-file cfn-lint-report.json || {
          echo "::warning::CloudFormation template issues found"
          cfn-lint template.yaml  # Show readable output
        }
        echo "::endgroup::"
      continue-on-error: true
    
    - name: Upload cfn-lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cfn-lint-report
        path: backend/cfn-lint-report.json
        retention-days: 30
    
    # Test Coverage (basic)
    - name: Run unit tests with coverage
      run: |
        echo "::group::Unit Tests with Coverage"
        if [ -d "tests/unit" ]; then
          pytest tests/unit/ --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80 || {
            echo "::warning::Test coverage is below 80%"
          }
        else
          echo "No unit tests found, creating placeholder"
          mkdir -p tests/unit
          echo "# Unit tests will be added here" > tests/unit/__init__.py
        fi
        echo "::endgroup::"
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    # Pre-commit Hooks (comprehensive check)
    - name: Run pre-commit hooks
      run: |
        echo "::group::Pre-commit Hooks"
        pre-commit run --all-files --show-diff-on-failure || {
          echo "::error::Pre-commit hooks failed"
          echo "Run 'make pre-commit' locally to fix issues"
          exit 1
        }
        echo "::endgroup::"
    
    # Summary
    - name: Quality gate summary
      run: |
        echo "::group::Quality Gate Summary"
        echo "âœ… Code formatting checked"
        echo "âœ… Linting completed"
        echo "âœ… Type checking completed"
        echo "âœ… Security scanning completed"
        echo "âœ… Template validation completed"
        echo ""
        echo "ðŸ“Š Quality metrics:"
        echo "- Code formatted with Black"
        echo "- Imports sorted with isort"
        echo "- Linted with flake8, pylint, and ruff"
        echo "- Type checked with mypy"
        echo "- Security scanned with bandit and safety"
        echo "- Templates validated with SAM and cfn-lint"
        echo ""
        echo "ðŸŽ¯ Code quality gate: PASSED"
        echo "::endgroup::"

  conventional-commits:
    name: Conventional Commits
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check conventional commits
      uses: wagoid/commitlint-github-action@v5
      with:
        configFile: 'backend/.commitlintrc.json'